import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.BdLwk_4I.js";const g=JSON.parse('{"title":"Green 🟢 - テストを通過させる効率的アプローチ","description":"","frontmatter":{},"headers":[],"relativePath":"Implementation-in-TDD.md","filePath":"Implementation-in-TDD.md"}'),h={name:"Implementation-in-TDD.md"};function l(k,s,p,e,d,r){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="green-🟢-テストを通過させる効率的アプローチ" tabindex="-1">Green 🟢 - テストを通過させる効率的アプローチ <a class="header-anchor" href="#green-🟢-テストを通過させる効率的アプローチ" aria-label="Permalink to &quot;Green 🟢 - テストを通過させる効率的アプローチ&quot;">​</a></h1><p>TDDプロセスでは、テストリスト（TODOリスト）から1つのテストケースを選び、そのテストをパスさせるための実装を行います。本記事では、テストをパスさせるための効率的な実装アプローチについて解説します。</p><h2 id="tdd-における「実装」とは" tabindex="-1">TDD における「実装」とは？ <a class="header-anchor" href="#tdd-における「実装」とは" aria-label="Permalink to &quot;TDD における「実装」とは？&quot;">​</a></h2><p>TDDプロセスのうち「実装」のステップで使われるのが、以下の 3つの典型的なアプローチです。</p><table tabindex="0"><thead><tr><th>手法</th><th>内容</th><th>メリット</th><th>使う場面</th></tr></thead><tbody><tr><td><code>明確な実装</code></td><td>最初から正解を書く</td><td>時間効率がよく、簡潔</td><td>ロジックが明白なとき</td></tr><tr><td><code>仮実装</code></td><td>動かすためだけの一時的なコード</td><td>最小実装を強制できる</td><td>最小限から始めたいとき</td></tr><tr><td><code>三角測量</code></td><td>テストを増やして一般化へ導く</td><td>テストが導く設計になる</td><td>本格的なロジックに向かう途中段階</td></tr></tbody></table><p>これらは状況や問題の複雑さに応じて使い分けることで、効率的かつ堅牢なTDDプロセスを実現することができます。<br> 実際の開発では、これらのそれぞれのアプローチを組み合わせて使用することが一般的です。</p><h2 id="明確な実装-obvious-implementation" tabindex="-1">明確な実装（Obvious Implementation） <a class="header-anchor" href="#明確な実装-obvious-implementation" aria-label="Permalink to &quot;明確な実装（Obvious Implementation）&quot;">​</a></h2><p>テストを通過させるために、直接的かつ素直な方法でコードを書くアプローチです。<br> 解決策が明白で、どのように実装すべきかが明らかな場合に使用します。 すでに答えが明確で、そのまま正解をストレートに書く実装です。</p><h3 id="特徴" tabindex="-1">特徴 <a class="header-anchor" href="#特徴" aria-label="Permalink to &quot;特徴&quot;">​</a></h3><ul><li>問題の解決方法が明確である場合に使用</li><li>単純な関数やロジックに適している</li><li>迅速に実装できる</li></ul><h3 id="使うタイミング" tabindex="-1">使うタイミング <a class="header-anchor" href="#使うタイミング" aria-label="Permalink to &quot;使うタイミング&quot;">​</a></h3><ul><li>ロジックがシンプルで、考えるまでもないとき</li><li>例えば add(2, 3) → 5 のような、仕様が直感的な場合</li></ul><h3 id="例" tabindex="-1">例 <a class="header-anchor" href="#例" aria-label="Permalink to &quot;例&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// テスト</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2つの数値を足し算する&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toBe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 明確な実装</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="仮実装-fake-implementation-sham-implementation" tabindex="-1">仮実装（Fake implementation / Sham implementation） <a class="header-anchor" href="#仮実装-fake-implementation-sham-implementation" aria-label="Permalink to &quot;仮実装（Fake implementation / Sham implementation）&quot;">​</a></h2><p>一時的に「動くけど中身が本物ではない」コードを書く方法です。 コードでまずベタ書きの値を使い、実装を進めつつ、徐々に変数に置き換えるなど、ハードコーディングや条件付きで値を返すことが多いです。</p><p>テストを通過させるために、一時的な固定値やハードコードした値を返すシンプルな実装を行うアプローチです。<br> これは、まず最も単純な方法でテストを通過させ、その後リファクタリングによって本来の実装に置き換えていく戦略です。</p><h3 id="特徴-1" tabindex="-1">特徴 <a class="header-anchor" href="#特徴-1" aria-label="Permalink to &quot;特徴&quot;">​</a></h3><ul><li>最も単純な方法でテストを通す</li><li>ハードコードした値を返すことが多い</li><li>徐々に本来の実装に進化させる</li></ul><h3 id="使うタイミング-1" tabindex="-1">使うタイミング <a class="header-anchor" href="#使うタイミング-1" aria-label="Permalink to &quot;使うタイミング&quot;">​</a></h3><p>明確な実装を続けている中で、予期しないレッドバーを目にした場合、仮実装に切り替える。</p><h3 id="使う理由" tabindex="-1">使う理由 <a class="header-anchor" href="#使う理由" aria-label="Permalink to &quot;使う理由&quot;">​</a></h3><ul><li>TDD のサイクルを止めずに進めるため</li><li>余計なロジックを書くのを防ぎ、「最低限」のコードで済ませる</li></ul><h3 id="例-1" tabindex="-1">例 <a class="header-anchor" href="#例-1" aria-label="Permalink to &quot;例&quot;">​</a></h3><p>以下のように、add(2, 3) に対応するよう「5」を返すだけ。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// テスト</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2つの数値を足し算する&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toBe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 仮実装（最初のステップ）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> テストが通るように、仮で決め打ちし、ハードコードした値を返す</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// リファクタリング後の本来の実装</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="三角測量-triangulation" tabindex="-1">三角測量（Triangulation） <a class="header-anchor" href="#三角測量-triangulation" aria-label="Permalink to &quot;三角測量（Triangulation）&quot;">​</a></h2><p>一般的な実装に進む前に、複数のテストケースを作成することで、より確実な実装を導き出すアプローチです。<br> 一つのテストケースだけでは偶然通過する可能性がありますが、複数のテストケースを使用することで、より堅牢な実装を見つけ出せます。</p><p>複数の異なる観測点から対象の位置を正確に特定する「測量手法」になぞらえて、\\複数のテストを通じて「正しい実装位置（一般化）」を導き出すという意味です。</p><p>複数のテストケースを増やして、一般化した実装へ導きます。<br> 最初は仮実装で通し、異なる値のテストケースを追加して、共通化できる実装へ進化させていきます。</p><h3 id="特徴-2" tabindex="-1">特徴 <a class="header-anchor" href="#特徴-2" aria-label="Permalink to &quot;特徴&quot;">​</a></h3><ul><li>複数のテストケースを使用して実装を導き出す</li><li>一般化された解決策を見つけるために使用</li><li>偶然通過する可能性を減らす</li></ul><h3 id="例-2" tabindex="-1">例 <a class="header-anchor" href="#例-2" aria-label="Permalink to &quot;例&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 最初のテスト</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2と3の足し算は5になる&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toBe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2つ目のテスト</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;5と7の足し算は12になる&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toBe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3つ目のテスト</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0と0の足し算は0になる&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toBe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 三角測量によって導き出された実装</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="どの手法をいつ使うべきか" tabindex="-1">どの手法をいつ使うべきか？ <a class="header-anchor" href="#どの手法をいつ使うべきか" aria-label="Permalink to &quot;どの手法をいつ使うべきか？&quot;">​</a></h2><table tabindex="0"><thead><tr><th>判断軸</th><th>明確な実装</th><th>仮実装</th><th>三角測量</th></tr></thead><tbody><tr><td>問題の複雑さ</td><td>低い</td><td>低〜中</td><td>中〜高</td></tr><tr><td>実装の見通し</td><td>はっきりしている</td><td>一部見えている</td><td>あいまいで未知が多い</td></tr><tr><td>テストの数</td><td>少数で済む</td><td>1つで様子を見る</td><td>増やして一般化する</td></tr><tr><td>TDDの段階</td><td>初期または明確な部分</td><td>初期または不確実なとき</td><td>実装を進化させるとき</td></tr></tbody></table><h2 id="三角測量における注意点" tabindex="-1">三角測量における注意点 <a class="header-anchor" href="#三角測量における注意点" aria-label="Permalink to &quot;三角測量における注意点&quot;">​</a></h2><ul><li>テストケースを追加するときは、「境界値」「異常系」など、<strong>意味のある観測点</strong>を意識するとよい。</li><li><strong>不要な冗長テスト</strong>にならないよう注意（実装が一般化された後は、類似のテストは削除してよい）。</li><li>2つ目のテストケースで実装が不十分と判断したら、<strong>すぐに3つ目を追加</strong>して一般化を強化する。</li></ul><h2 id="アンチパターンと注意点" tabindex="-1">アンチパターンと注意点 <a class="header-anchor" href="#アンチパターンと注意点" aria-label="Permalink to &quot;アンチパターンと注意点&quot;">​</a></h2><table tabindex="0"><thead><tr><th>アンチパターン</th><th>説明</th><th>対策</th></tr></thead><tbody><tr><td>「最初から完璧な実装」を目指す</td><td>Red→Greenのプロセスを無視して一気に実装してしまう</td><td>必ずRed→Green→Refactorを守る</td></tr><tr><td>仮実装から脱却できない</td><td>べた書きが残り、本来の実装に進化できない</td><td>新しいテストで一般化を促す</td></tr><tr><td>三角測量のテストが増えすぎる</td><td>類似ケースを無意味に追加してしまう</td><td>意味の異なる値を使い、過剰なテストは整理する</td></tr></tbody></table>`,40)]))}const y=i(h,[["render",l]]);export{g as __pageData,y as default};
