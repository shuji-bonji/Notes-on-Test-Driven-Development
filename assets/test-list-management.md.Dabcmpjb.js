import{_ as a,c as e,o as s,ag as d}from"./chunks/framework.BdLwk_4I.js";const i="/Notes-on-Test-Driven-Development/images/TDD-flow-change-test-list.svg",b=JSON.parse('{"title":"テストリストの作成と管理","description":"TDDにおけるテストリストの作成方法、管理のベストプラクティス、優先順位付けの手法を解説。Kent Beckのアプローチに基づいた効果的な進め方を紹介します。","frontmatter":{"description":"TDDにおけるテストリストの作成方法、管理のベストプラクティス、優先順位付けの手法を解説。Kent Beckのアプローチに基づいた効果的な進め方を紹介します。"},"headers":[],"relativePath":"test-list-management.md","filePath":"test-list-management.md"}'),l={name:"test-list-management.md"};function n(r,t,h,o,p,c){return s(),e("div",null,t[0]||(t[0]=[d(`<h1 id="テストリストの作成と管理" tabindex="-1">テストリストの作成と管理 <a class="header-anchor" href="#テストリストの作成と管理" aria-label="Permalink to &quot;テストリストの作成と管理&quot;">​</a></h1><p>テスト駆動開発(TDD)においては、テストリストの作成と管理が重要なプラクティスとなります。 テストリストは、実装すべき機能やシナリオを整理し、TDDのサイクルを効果的に進めるための道しるべとなります。</p><h2 id="テストリストとは何か" tabindex="-1">テストリストとは何か <a class="header-anchor" href="#テストリストとは何か" aria-label="Permalink to &quot;テストリストとは何か&quot;">​</a></h2><p>テストリストとは、これから実装する機能や仕様をテストケースの形で書き出した一覧です。<br> 実装前にこのリストを作成することで、何を実装すべきか、またその完了基準が明確になります。<br> また、進行状況の可視化や、抜け漏れの防止にも役立ちます。</p><p>これはTDDの最初のステップであり、実装する前に「何をテストすべきか」を明確にするためのツールです。</p><p>テストリストには、以下のような項目を含めます。</p><ul><li>基本的な機能のテスト</li><li>境界条件のテスト</li><li>エラーケースのテスト</li><li>エッジケースのテスト</li></ul><p>Kent Beckは著書「テスト駆動開発」の中で、テストリストを「やることリスト」として扱い、タスクの可視化と管理に役立てることを提案しています。</p><h2 id="テストリストの作り方" tabindex="-1">テストリストの作り方 <a class="header-anchor" href="#テストリストの作り方" aria-label="Permalink to &quot;テストリストの作り方&quot;">​</a></h2><p>効果的なテストリストを作成するには、以下のステップを踏むと良いでしょう。</p><table tabindex="0"><thead><tr><th>順番</th><th>ステップ</th><th>内容</th></tr></thead><tbody><tr><td>1</td><td><code>要件の分析</code></td><td>実装すべき機能や仕様を理解し、それに基づいて必要なテストを洗い出します。</td></tr><tr><td>2</td><td><code>ユースケースの検討</code></td><td>ソフトウェアがどのように使われるかを考え、ユーザーの視点からのテストシナリオを考えます。</td></tr><tr><td>3</td><td><code>粒度の決定</code></td><td>テストケースの粒度を適切に設定します。大きすぎるとテストの目的が不明確になり、小さすぎると管理が煩雑になります。</td></tr><tr><td>4.</td><td><code>優先順位の設定</code></td><td>重要度や依存関係に基づいて、テストの優先順位を設定します。</td></tr></tbody></table><p>良いテストリストは、仕様や要件をよく理解した上で、小さく・具体的な単位で記述されていることが重要です。<br> 以下のステップで作成してみましょう。</p><h3 id="テストリストの例-計算アプリ" tabindex="-1">テストリストの例: 計算アプリ <a class="header-anchor" href="#テストリストの例-計算アプリ" aria-label="Permalink to &quot;テストリストの例: 計算アプリ&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> * 【計算機アプリケーションのテストリスト】</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> * </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> * - 2つの正の整数の加算ができること</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> * - 負の数の加算ができること</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> * - 小数の加算ができること</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> * - 2つの正の整数の減算ができること</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> * - 負の数の減算ができること</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> * - 小数の減算ができること</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> * - 2つの正の整数の乗算ができること</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> * - 0との乗算が0を返すこと</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> * - 2つの正の整数の除算ができること</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> * - 0による除算でエラーを返すこと</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> * - 計算履歴が保存されること</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> * - 計算履歴をクリアできること</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> */</span></span></code></pre></div><h3 id="テストリストの例-ログイン機能" tabindex="-1">テストリストの例: ログイン機能 <a class="header-anchor" href="#テストリストの例-ログイン機能" aria-label="Permalink to &quot;テストリストの例: ログイン機能&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [x] 正常にログインできる</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [ ] パスワードが間違っている場合、ログインできない</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [ ] トークンが返されることを確認する</span></span></code></pre></div><h2 id="テストリストの管理方法" tabindex="-1">テストリストの管理方法 <a class="header-anchor" href="#テストリストの管理方法" aria-label="Permalink to &quot;テストリストの管理方法&quot;">​</a></h2><p>テストリストは静的なものではなく、常に進化させていくべき動的なツールです。<br> 開発の進行に合わせて適切に管理する必要があります。</p><table tabindex="0"><thead><tr><th>項目</th><th>内容</th></tr></thead><tbody><tr><td><code>進捗の追跡</code></td><td>完了したテストにはチェックマークをつけるなど、進捗を可視化します。</td></tr><tr><td><code>リストの更新</code></td><td>実装中など開発の過程で新たに必要と思われるテストを追加したり、不要になったテストを削除したりします。</td></tr><tr><td><code>リファクタリングによる影響の評価</code></td><td>コードのリファクタリングを行った際に、既存のテストに影響がないか確認します。</td></tr><tr><td><code>テスト間の依存関係の管理</code></td><td>テスト間に依存関係がある場合は、それを明示してテストの実行順序に注意します。</td></tr><tr><td><code>他者との共有</code></td><td>チームで共有することで、テスト観点の抜け漏れを防ぎます。</td></tr></tbody></table><p>小さなテスト単位でリストアップし、「今はここに取り組んでいる」というフォーカスを明確に持つことがTDDの流れを加速させます。</p><h3 id="効果的な管理ツール" tabindex="-1">効果的な管理ツール <a class="header-anchor" href="#効果的な管理ツール" aria-label="Permalink to &quot;効果的な管理ツール&quot;">​</a></h3><p>テストリストは、以下のようなツールで管理することができます。</p><ul><li>単純なテキストファイル</li><li>Github リポジトリの Discussions</li><li>タスク管理ツール（Trello, Jiraなど）</li><li>TDDに特化したツール（TestRail, Fitnesse など）</li><li>IDEの統合機能（TODO コメントなど）</li><li>スプレッドシート</li></ul><h2 id="テストリストの優先順位付け" tabindex="-1">テストリストの優先順位付け <a class="header-anchor" href="#テストリストの優先順位付け" aria-label="Permalink to &quot;テストリストの優先順位付け&quot;">​</a></h2><p>すべてのテストは同じ重要度ではありません。<br> テストすべき項目が多くなってきたら、優先順位をつけることで開発効率を高めることができます。</p><table tabindex="0"><thead><tr><th>項目</th><th>内容</th></tr></thead><tbody><tr><td><code>重要度による優先順位</code></td><td>ビジネス要件に直結する重要な機能から優先的にテストします。</td></tr><tr><td><code>依存関係による優先順位</code></td><td>他の機能の前提となる基本機能から順にテストします。</td></tr><tr><td><code>複雑さによる優先順位</code></td><td>シンプルな機能から複雑な機能へと段階的にテストを進めます。</td></tr><tr><td><code>リスクによる優先順位</code></td><td>技術的なリスクが高い部分を優先的にテストすることで、早期にリスクを軽減します。</td></tr><tr><td><code>ケースの種類による優先順位</code></td><td>正常系から異常系へ段階的に進めることで、仕様理解とテスト戦略を整理しやすくなります。</td></tr></tbody></table><h3 id="invest基準" tabindex="-1">INVEST基準 <a class="header-anchor" href="#invest基準" aria-label="Permalink to &quot;INVEST基準&quot;">​</a></h3><p>テストケースの質を評価する際に、INVEST基準を活用することも有効です。</p><ul><li><strong>I</strong>ndependent（独立している）: 他のテストに依存せず、単独で実行できる</li><li><strong>N</strong>egotiable（交渉可能）: 詳細は開発プロセスの中で調整できる</li><li><strong>V</strong>aluable（価値がある）: ビジネス価値に直結している</li><li><strong>E</strong>stimable（見積もり可能）: 実装の規模を見積もることができる</li><li><strong>S</strong>mall（小さい）: 適切なサイズに分割されている</li><li><strong>T</strong>estable（テスト可能）: 検証可能な条件がある</li></ul><blockquote><p>INVEST基準とは、ユーザーストーリーの品質を評価するための基準で、ユーザーストーリーを作成する際に意識することで、より効果的なストーリーを作成することができます。</p></blockquote><h2 id="テストリストを活用したtddの実践" tabindex="-1">テストリストを活用したTDDの実践 <a class="header-anchor" href="#テストリストを活用したtddの実践" aria-label="Permalink to &quot;テストリストを活用したTDDの実践&quot;">​</a></h2><p>テストリストは単なるチェックリストではなく、TDDのサイクルを効果的に回すためのナビゲーションツールです。</p><h3 id="テストリストの更新" tabindex="-1">テストリストの更新 <a class="header-anchor" href="#テストリストの更新" aria-label="Permalink to &quot;テストリストの更新&quot;">​</a></h3><p><img src="`+i+'" alt="テストリストの更新"></p><h3 id="tddの基本サイクルでの、テストリスト活用" tabindex="-1">TDDの基本サイクルでの、テストリスト活用 <a class="header-anchor" href="#tddの基本サイクルでの、テストリスト活用" aria-label="Permalink to &quot;TDDの基本サイクルでの、テストリスト活用&quot;">​</a></h3><table tabindex="0"><thead><tr><th>順番</th><th>ステップ</th><th>内容</th></tr></thead><tbody><tr><td>1</td><td><code>テストリスト</code>から次のテストを選択</td><td>優先順位に基づいて次に実装すべきテストを選びます</td></tr><tr><td>2</td><td>Red🔴</td><td>選んだテストを実装し、失敗することを確認します</td></tr><tr><td>3</td><td>Green🟢</td><td>テストが通るように最小限のコードを実装します</td></tr><tr><td>4</td><td>Refactor🔵</td><td>コードを改善しつつ、テストが通り続けることを確認します</td></tr><tr><td>5</td><td><code>テストリスト</code>の更新</td><td>完了したテストにチェックをつけ、必要に応じて新しいテストを追加します</td></tr><tr><td>6</td><td>次のテストへ</td><td>サイクルを繰り返します</td></tr></tbody></table><h2 id="実践的なヒント" tabindex="-1">実践的なヒント <a class="header-anchor" href="#実践的なヒント" aria-label="Permalink to &quot;実践的なヒント&quot;">​</a></h2><p>テストリストを効果的に活用するための実践的なヒントをいくつか紹介します。</p><table tabindex="0"><thead><tr><th>ヒント</th><th>内容</th></tr></thead><tbody><tr><td><code>共有と可視化</code></td><td>チーム開発の場合、テストリストを共有し、進捗を可視化することで、チームメンバー間でのコミュニケーションが円滑になります。</td></tr><tr><td><code>定期的な見直し</code></td><td>テストリストは定期的に見直し、不要なテストの削除や優先順位の調整を行います。</td></tr><tr><td><code>粒度の調整</code></td><td>テストリストの粒度が大きすぎる場合は、より小さなテストに分割して管理しやすくします。</td></tr><tr><td><code>コンテキストの記録</code></td><td>テストが必要となった背景や理由を記録しておくと、後から見直した際に役立ちます。</td></tr><tr><td><code>完了の定義</code></td><td>テストが「完了」と見なせる条件を明確にしておきます。</td></tr></tbody></table><h2 id="まとめ" tabindex="-1">まとめ <a class="header-anchor" href="#まとめ" aria-label="Permalink to &quot;まとめ&quot;">​</a></h2><p>テストリストはTDDにおける重要なプラクティスであり、効果的に活用することで、開発プロセスが整理され、品質の高いソフトウェアを効率よく開発することができます。 テストリストを作成し、適切に管理することで、TDDの「赤・緑・リファクタリング」のサイクルをスムーズに進めることができるでしょう。</p><hr><p>参考文献：</p><ul><li>Kent Beck著「テスト駆動開発」</li><li>Steve Freeman、Nat Pryce著「テスト駆動開発の道案内」</li><li>James W. Grenning著「組込みソフトウェア開発のためのテスト駆動開発」</li></ul>',44)]))}const g=a(l,[["render",n]]);export{b as __pageData,g as default};
